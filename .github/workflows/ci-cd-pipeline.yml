name: CI/CD Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: medbaha/pfebackend
  FRONTEND_IMAGE: medbaha/pfefrontend
  BACKEND_TAG: ${{ github.sha }}
  FRONTEND_TAG: ${{ github.sha }}

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarQube Analysis Backend
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          scannerArgs: >
            -Dsonar.projectKey=microsponsoring-backend
            -Dsonar.sources=src/main/java
            -Dsonar.java.binaries=target/classes
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
            -Dsonar.java.libraries=target/lib/*.jar

      - name: SonarQube Analysis Frontend
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          scannerArgs: >
            -Dsonar.projectKey=microsponsoring-frontend
            -Dsonar.sources=src
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info

  backend:
    name: Backend Testing and Building
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Backend Tests
        run: |
          cd microsponsoring-backend
          mvn clean test

      - name: Build Backend JAR
        run: |
          cd microsponsoring-backend
          mvn clean package -DskipTests

  frontend:
    name: Frontend Testing and Building
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: microsponsoring-frontend/package-lock.json

      - name: Install Frontend Dependencies
        run: |
          cd microsponsoring-frontend
          npm ci

      - name: Run Frontend Tests
        run: |
          cd microsponsoring-frontend
          npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage

      - name: Build Frontend
        run: |
          cd microsponsoring-frontend
          npm run build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend, frontend, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./microsponsoring-backend
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE }}:${{ env.BACKEND_TAG }}
            ${{ env.BACKEND_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./microsponsoring-frontend
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}:${{ env.FRONTEND_TAG }}
            ${{ env.FRONTEND_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          kubectl set image deployment/backend-deployment backend=${{ env.BACKEND_IMAGE }}:${{ env.BACKEND_TAG }} -n staging
          kubectl set image deployment/frontend-deployment frontend=${{ env.FRONTEND_IMAGE }}:${{ env.FRONTEND_TAG }} -n staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production
        run: |
          export KUBECONFIG=kubeconfig
          kubectl set image deployment/backend-deployment backend=${{ env.BACKEND_IMAGE }}:${{ env.BACKEND_TAG }} -n production
          kubectl set image deployment/frontend-deployment frontend=${{ env.FRONTEND_IMAGE }}:${{ env.FRONTEND_TAG }} -n production

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify on Slack/Discord (Optional)
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
